# -*- coding: utf-8 -*-
"""
Created on Thu Jun 22 12:26:32 2017
@author: Yohan
"""

#import code blocks
import image_extraction as ie
import data_processing as dp

#import other modules
import numpy as np
import glob
import matplotlib.pyplot as plt
import csv
import pandas as pd
import csv
from pylab import *
from datetime import datetime
import cv2

##############################################################################

#input parameters  
deltaRho = 998. #absolute density difference between two fluids in kg/m^3
capillaryDiameter = 2.10 #capillary diameter in mm
reloads = 1 #converge 
trueSyringeRotation = 0 #unsure of true syringe rotation
deltaT = 2 #volumetric thermal flucutations
thermalExpCoeff = 0.000214 #1/K or 1/C
folderName = 'Biofilm Testing/Negative Control Test/Surfactant Testing/Triton/C = 0.01 mM' # Must be located in Data folder
numMethod = 1 # 1 for 5 points (faster), 2 for all points
imageExtension = '.jpg'
roomTemp = 23 #C
syringeFluid = 10**-3 #mm3 
tempFreq = 60 #s
timeTest = 24 #h
stride = 10

fluid = 'Triton x-100 (C = 0.01 mM)'
freq = '0.1' #Hz

importData = False
processData = True
plotData = True
plotTemp = False
storeData = False
bubbleContour = False
plotVolandTemp = False
generateMask = False

##############################################################################

# Parse user inputs
dirName = '../Data/' + folderName + '/' 
fileList = glob.glob(dirName + '*Test*' + imageExtension)[::stride]
saveFile = dirName + 'output.csv'
capillaryFile = glob.glob(dirName + '*Capillary*' + imageExtension)
capillaryImage = ie.load_image_file(capillaryFile[0])
N = len(fileList)-1



## Read temperature data
#tempData = []
#with open(tempFile,'rb') as csvfile:
#    reader = csv.reader(csvfile, quotechar='|')
#    reader.next()
#    for row in reader:
#        tempData = tempData.append(reader)
#temperature = pd.read_excel(tempFile)
## Read time vector
#timeData = glob.glob(dirName + '*time*' + '.csv') 
#with open(timeData[0], 'rb') as timeFile:
#    timeLapse  = csv.reader(timeFile)    
#    timeLapse  = list(timeLapse)    


######################## Plotting and Storing Data ############################

if __name__ == "__main__":

  
    if processData: 
        
        # Allocate arrays for storing data
        surfaceTenVec = np.zeros((N,1))
        dropVolVec = np.zeros((N,1))
        volErrorVec = np.zeros((N,1))
        bondNumberVec = np.zeros((N,1))
        worthNumberVec = np.zeros((N,1))
        surfAreaVec = np.zeros((N,1))
        timeVec = np.zeros((N,1))
        
        for i in range(N):
            imageFile = fileList[i]
            dropletImage = ie.load_image_file(imageFile)     
            
            ret = dp.get_surf_tension(dropletImage, capillaryImage, deltaRho,
                                                capillaryDiameter, numMethod, 
                                                trueSyringeRotation, reloads,
                                                deltaT,thermalExpCoeff)
                            
            #returns values if not black image                                    
            if not isnan(ret[0]):
                surfaceTenVec[i] = ret[0]*10**3
                dropVolVec[i]    = ret[1]*10**9
                volErrorVec[i]   = ret[2]
                bondNumberVec[i] = ret[3]
                worthNumberVec[i] = ret[4]
                surfAreaVec[i]    = ret[5]
#                timeVec[i]       = timeLapse[0][i]
                
            #index time by frame number if using ffmpy
                timeVec[i]       = i*10*stride
                
            else:
                surfaceTenVec[i]  = nan
                dropVolVec[i]     = nan
                volErrorVec[i]    = nan
                bondNumberVec[i]  = nan
                worthNumberVec[i] = nan
                surfAreaVec[i]    = nan
                timeVec[i]        = nan
        
        surfaceTenVec = surfaceTenVec[np.where(np.isfinite(surfaceTenVec))]
        dropVolVec    = dropVolVec[np.where(np.isfinite(dropVolVec))]
        volErrorVec    = volErrorVec[np.where(np.isfinite(volErrorVec))]
        timeVec       = timeVec[np.where(np.isfinite(timeVec))]/3600
        bondNumberVec = bondNumberVec[np.where(np.isfinite(bondNumberVec))]
        worthNumberVec = worthNumberVec[np.where(np.isfinite(worthNumberVec))]
        surfAreaVec    = surfAreaVec[np.where(np.isfinite(surfAreaVec))]
        
        avgSurfaceTen = np.average(surfaceTenVec)
        relDropVolVec = dropVolVec/dropVolVec[0]
        relVolErrorVec = volErrorVec/dropVolVec[0]          

    if importData:

        #load temperature data
        tempFile = glob.glob(dirName + '*Temperature*' + '.xls')[0]        
        
        #load droplet data 
        if numMethod == 1:
            outputFile = glob.glob(dirName + '*5pt*' + '.csv')[0] 
        else:
            outputFile = glob.glob(dirName + '*Iterative*' + '.csv')[0]        
        
        #import droplet data
        outputData = pd.read_csv(outputFile)
        outputData = outputData.astype(float64)
        
        timeVec = np.array(outputData.Time_hr)
        surfaceTenVec = np.array(outputData.ST_mN_m)
        dropVolVec = np.array(outputData.Vol_mm3)
        relDropVolVec = np.array(outputData.RelVol_mm3)
        volErrorVec = np.array(outputData.Error_mm3)
        bondNumberVec = np.array(outputData.Bo_Number)
        worthNumberVec = np.array(outputData.Wo_Number)
        
        #import droplet info and temp/rh data
        tempHumData = pd.read_excel(tempFile)
        
        #format time into hours
#        timeStep = np.average(timeVec[-1]/len(timeVec))
        
        tempTimeVec = np.linspace(0,timeTest,timeTest*tempFreq)
#        tempTimeVec = tempTimeVec[np.where(tempTimeVec<=timeVec[-1])]
        
        tempData = np.array(tempHumData.Temp_degC)[:len(tempTimeVec)]
        normTempVec = tempData/np.max(tempData)
        
        
#        timeData = tempHumData.Time
#        timeFmt = '%m-%d-%y %H:%M:%S'
#        
#        tempTimeVec = [datetime.strptime(timeData.iloc[0],timeFmt).total_seconds() for total_seconds in timeData]
               

    if plotData:

        # Define plotting text features
        titleFont = {'family': 'serif','weight': 'bold','size': 15}
        axesFont = {'weight': 'bold'}
        
        plotTitle = fluid + ' in Air Test'            
        # Plot surface tension vs. time
        fig,ax1 = plt.subplots()
        plt.title(plotTitle,titleFont)
        plt1 = ax1.plot(timeVec,surfaceTenVec,'bo',markeredgewidth=0.0,label='Surface Tension')
        ax1.set_xlabel('Time (hr)',fontdict=axesFont)
        ax1.set_xlim(0,timeTest)
        ax1.set_ylabel('Surface Tension (mN/m)',fontdict=axesFont)
        ax1.tick_params('y',colors='k')
        ax1.set_ylim([int(min(surfaceTenVec))-2,int(max(surfaceTenVec))+4])
        
        
        #add uncertainty annotation 
        plt.figtext(1,1,'Volumetric Uncertainty = +/- %0.3f mm$^3$' 
        %(np.average(volErrorVec)),horizontalalignment = 'right', verticalalignment = 'top')
    

        #add final bond number annotation 
        plt.figtext(1,1,'Final Bond Number = +/- %0.3f mm$^3$' %bondNumberVec[-1],
                            horizontalalignment = 'right', verticalalignment = 'bottom')
    
    
        
        # Plot relative drop volume vs. time
        ax2 = ax1.twinx()
        plt2 = ax2.plot(timeVec,relDropVolVec,'ro',markeredgewidth=0.0,label='Rel. Drop Volume')
        plt3 = ax2.plot(timeVec,worthNumberVec,'yo',markeredgewidth=0.0,label='Worthington Number')
        ax2.set_ylabel('V(t)/V$_0$ & Worth. Number & Temp (Norm.)',fontdict=axesFont)
        ax2.set_ylim([0,1.5])
        ax2.tick_params('y',colors='k')
        
        plt4 = []        
        
        if plotTemp:
            
            plt4 = ax2.plot(tempTimeVec[::stride/5],normTempVec[::stride/5],'go',markeredgewidth=0.0,label='Normalized Temperature')
        
        plots = plt1+plt2+plt3+plt4
        pltabs =[p.get_label() for p in plots]
        ax1.legend(plots,pltabs,loc='best',prop={'size': 10})
                
        
    if plotTemp:
        
        # Define plotting text features
        titleFont = {'family': 'serif','weight': 'bold','size': 15}
        axesFont = {'weight': 'bold'}
        
        plotTitle = fluid + ' in Air Test'
        
        plt.title(plotTitle,titleFont)
        # Plot drop volume vs. time
        fig2,ax1_2 = plt.subplots()
        plt.title(plotTitle,titleFont)
        plt1_2 = ax1_2.plot(timeVec,dropVolVec,'bo',markeredgewidth=0.0,label='Drop Volume')
        ax1_2.set_xlabel('Time (hr)',fontdict=axesFont)
        ax1_2.set_xlim([0,timeTest])
        ax1_2.set_ylim([np.min(dropVolVec)-0.5,np.max(dropVolVec)+0.5])
        ax1_2.set_ylabel('Drop Volume (mm$^3$)',fontdict=axesFont)
        ax1_2.tick_params('y',colors='k')
        
        # Plot temperature
        ax2_2 = ax1_2.twinx()
        plt2_2 = ax2_2.plot(tempTimeVec,tempData,'go',markeredgewidth=0.0,label='Temperature')
        
        ax2_2.set_ylabel('Temperature $^o$C',fontdict=axesFont)
        ax2_2.set_ylim([np.min(tempData)-0.5,np.max(tempData)+0.5])
        ax2_2.tick_params('y',colors='k')
        
        plots_2 = plt1_2+plt2_2
        pltabs_2 =[p.get_label() for p in plots_2]
        ax1_2.legend(plots_2,pltabs_2,loc='best',prop={'size': 10})
        
        
        #add uncertainty annotation 
        plt.figtext(1,1,'Volumetric Uncertainty = +/- %0.3f mm$^3$' 
        %(np.average(volErrorVec)),horizontalalignment = 'right', verticalalignment = 'top')  
               
        plt.show()
        
    if storeData:
        
        if numMethod == 1:
            plt.savefig(dirName + '5-Point Method ' +'Results.png')
            saveFile = dirName + '5ptMethod_output.csv'
        else:
            plt.savefig(dirName + 'Iterative Method ' +'Results.png')
            saveFile = dirName + 'IterativeMethod_output.csv'
        
        
        with open(saveFile, 'wb') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(['Time_hr','ST_mN_m','Vol_mm3','RelVol_mm3',
                            'Error_mm3','Bo_Number','Wo_Number'])
                                                             
            for i in range(len(timeVec)):
                writer.writerow([timeVec[i],surfaceTenVec[i],
                                 dropVolVec[i],relDropVolVec[i],
                                 volErrorVec[i],bondNumberVec[i],worthNumberVec[i]])
            
    if bubbleContour:
        
        #define length of test (hrs)
        totTime = 48
        totTime *= 3600
        
        timeVec = np.linspace(0,totTime,totTime/10)
        timeVec /= 3600

        #input sinusodial temperature swing of delT(period = 12 hours)
        w = 2*np.pi/24
        temp = deltaT*np.cos(w*timeVec)+roomTemp        
        
        # Define plotting text features
        titleFont = {'family': 'serif','weight': 'bold','size': 15}
        axesFont = {'weight': 'bold'}        
        
        bubbleRad = np.array([1,500,750,1000,1500])*10**-3        
        
        #initial droplet size (mm) based off LB Broth test 6
        initDrop = dropVolVec[2680]
        
        #initialize initial droplet matrix       
        expDropVolVec = np.ones([len(temp),len(bubbleRad)])*initDrop      
        
        
        for i in range(len(bubbleRad)):

            bubbleVol = 4*np.pi*bubbleRad[i]**3/3
            
            for j in range(len(temp)):
                
                #use IGL considering constant p and n
                expBubbleVol = (temp[j])*bubbleVol/temp[0]-bubbleVol
                
                #consider expantion of fluid inside syringe (1mL)          
                expLiquidVol = thermalExpCoeff*syringeFluid*(temp[j]-temp[0])
                
                expDropVolVec[j,i] = initDrop+expBubbleVol+expLiquidVol
        
        
        # Plot expanded droplet volume vs. time
        plots = []
        radii = ['1 um','500 um','750 um','1000 um','1500 um','Real Data']
        fig,ax1 = plt.subplots()
        plt.title('Temperature Effects on Droplet Volume',titleFont)
        # Plot set of curves for each bubble radius
        for ii in range(len(bubbleRad)+1):
            
            if ii != len(bubbleRad):
                plts = ax1.plot(timeVec,expDropVolVec[:,ii],
                                c=np.random.rand(3,1),markeredgewidth=0.0,
                                label=radii[ii])
                plots = plots + plts
                
            else:
                plts = ax1.plot(timeVec[:len(dropVolVec)],dropVolVec,
                                'ro',markeredgewidth=0.0,
                                label=radii[ii])
                plots = plots + plts
                
        ax1.set_xlabel('Time (hr)',fontdict=axesFont)
        ax1.set_xticks(np.arange(0,max(timeVec),12))
        ax1.set_ylabel('Drop Volume (mm$^3$), $\delta$T = 2$^o$C ',fontdict=axesFont)
        ax1.tick_params('y',colors='k')
        ax1.set_ylim([9.4,12.4])
        
        ax1.legend(plots,radii,loc='best',prop={'size': 10})
        
        plt.show()

    if plotVolandTemp: 
        
        # Define plotting text features
        titleFont = {'family': 'serif','weight': 'bold','size': 15}
        axesFont = {'weight': 'bold'}
                        
        # Plot surface tension vs. time
        fig,ax1 = plt.subplots()
        plt.title('DI Water Test (0.1 Hz)',titleFont)
        plt1 = ax1.plot(timeVec,dropVolVec,'bo',markeredgewidth=0.0,label='Drop Volume')
        ax1.set_xlabel('Time (hr)',fontdict=axesFont)
        ax1.set_xticks(np.arange(0,max(timeVec),6))
        ax1.set_ylabel('Drop Volume (mm$^3$)',fontdict=axesFont)
        ax1.tick_params('y',colors='k')
        
        
        #add uncertainty annotation 
        plt.figtext(1,1,'Volumetric Uncertainty = +/- %0.3f mm$^3$' 
        %(np.average(volErrorVec)),horizontalalignment = 'right', verticalalignment = 'top')
    
    
    
        
        # Plot relative drop volume vs. time
        ax2 = ax1.twinx()
        plt2 = ax2.plot(tempTime,tempData,'go',markeredgewidth=0.0,label='Temperature')
        
        ax2.set_ylabel('Temperature $^o$C',fontdict=axesFont)
        
        ax2.tick_params('y',colors='k')
        
        plots = plt1+plt2
        pltabs =[p.get_label() for p in plots]
        ax1.legend(plots,pltabs,loc='best',prop={'size': 10})
        
        plt.show()
        
    if generateMask:
        
        histCompVec = np.zeros((N,1)) 
        timeVec = np.zeros((N,1))
        
        # clean droplet
        imgInital = cv2.imread(fileList[0],0)

        # create a mask
        mask = np.zeros(imgInital.shape[:2], np.uint8)
        mask[500:1000, 800:1750] = 255
        maskedInital_img = cv2.bitwise_and(imgInital,imgInital,mask = mask)
        
        # Check third argument for mask
        hist_maskInital = cv2.calcHist([imgInital],[0],maskedInital_img,[256],[0,256])
        
        offset = 0
        
        for i in range(N):
            
            img = cv2.imread(fileList[i],0)

            # final image of droplet
            masked_img = cv2.bitwise_and(img,img,mask = mask)
        
            # Check third argument for mask
            hist_mask = cv2.calcHist([img],[0],masked_img,[256],[0,256])
            
            histCompVec[i] = cv2.compareHist(hist_maskInital,hist_mask,cv2.cv.CV_COMP_CORREL)
#            print histCompVec[i]
#            if i == 0:
#                print 'Pass'
                
            if histCompVec[i] == 1:
                histCompVec[i] = histCompVec[i-1]
                
#                timeVec[i]     = i*10./3600.
                    
#            else:
#                
#                histCompVec[i] = offset + cv2.compareHist(hist_maskInital,hist_mask,cv2.cv.CV_COMP_CORREL)
##                print i    
#                if abs(abs(histCompVec[i])-abs(histCompVec[i-1])) > 0.1:
#                    offset = histCompVec[i-1]-histCompVec[i]
#                    histCompVec[i] = offset + histCompVec[i] 
#                    timeVec[i]       = i*10./3600.
#                    print offset
                  
            timeVec[i]     = i*10./3600.
                    
        histCompVec[0] = 1
        
        offsetData = dp.remove_offsets(histCompVec)       
        
        
        
        # Define plotting text features
        titleFont = {'family': 'serif','weight': 'bold','size': 15}
        axesFont = {'weight': 'bold'}     

        # Plot surface tension vs. time
        fig,ax1 = plt.subplots()
        plt.title('DI Water, 6 Hour Test (0.1 Hz)',titleFont)
        plt1 = ax1.plot(timeVec2,surfaceTenVec,'go',markeredgewidth=0.0,label='Surface Tension')
        ax1.set_xlabel('Time (hr)',fontdict=axesFont)
        ax1.set_xticks(np.arange(0,max(timeVec),10))
        ax1.set_ylim([30,55])
        ax1.set_ylabel('Surface Tension (mN/m)',fontdict=axesFont)
        ax1.tick_params('y',colors='k')
        
        
        # Plot relative drop volume vs. time
        ax2 = ax1.twinx()
        plt2 = ax2.plot(timeVec,offsetData,'bo',markeredgewidth=0.0,label='Turbidity')
        
        ax2.set_ylabel('Turbidity (Histogram Comparison)',fontdict=axesFont)
        
        ax2.tick_params('y',colors='k')
        
        plots = plt1+plt2
        pltabs =[p.get_label() for p in plots]
        ax1.legend(plots,pltabs,loc='best',prop={'size': 10})
        
        
        
        
        
        
        

        
